#!/usr/bin/env python3

import os
import pathlib
import platform
import stat
import sys
import urllib.request

DEFAULT_VERSION = "3.4.1"


def main(args, env):
    real = None
    root = pathlib.Path(os.getcwd()).resolve()
    workspace = get_workspace(root)
    if workspace is None:
        return

    candidates = ["tools/bazel-real", ".bazel/bin/bazel-real"]
    for candidate in candidates:
        candidate = workspace/candidate
        if executable(candidate):
            real = candidate
            break

    if real is None:
        real = candidates[0]
        fetch(real)

    env["PYTHONNOUSERSITE"] = "yes"
    os.execve(real, args, env)

def get_workspace(root, last=None):
    workspace = root / "WORKSPACE"
    if workspace.exists():
        return root
    if root == last:
        return None
    return get_workspace(root.parent, root)


def fetch(real):
    version = bazelversion()
    plat = platform.system().lower()
    url = "https://github.com/bazelbuild/bazel/releases/download/{version}/bazel-{version}-{plat}-x86_64".format(
        version=version, plat=plat,
    )
    req = urllib.request.Request(url, method="GET")
    with urllib.request.urlopen(req) as response:
        with open(real, "wb") as f:
            f.write(response.read())
    os.chmod(real, stat.S_IRWXU)


def real_executable():
    for candidate in candidates:
        if executable(candidate):
            return candidate


def executable(path):
    return os.path.isfile(path) and os.access(path, os.X_OK)


def bazelversion():
    try:
        with open(".bazelversion") as f:
            return f.read().strip()
    except:
        return DEFAULT_VERSION


if __name__ == "__main__":
    sys.exit(main(list(sys.argv), dict(os.environ)))
